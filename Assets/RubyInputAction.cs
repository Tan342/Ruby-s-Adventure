//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/RubyInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RubyInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RubyInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RubyInputAction"",
    ""maps"": [
        {
            ""name"": ""Ruby"",
            ""id"": ""02087932-d871-432f-b202-0d387eb98a76"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""24cc2756-8d81-4475-a22b-153aafa16b68"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Launch"",
                    ""type"": ""Button"",
                    ""id"": ""c6cbee86-998d-4312-aeb1-799a49075858"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Talk"",
                    ""type"": ""Button"",
                    ""id"": ""b39a1aec-7598-40f7-893e-67eeb30aca04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dafe38ec-3f0b-4a9c-a1f7-7dfe4d2b0324"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2135e434-eea0-47d1-95c0-eda5ffb666bf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eb3c6e88-58f5-4f5c-a4d2-8c033e929b11"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3d9b44e0-1772-4990-a8f1-0118f54e4bc5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""83205df2-2f60-40c6-864e-86eb9bd5d82a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d9ffbcf4-9d23-4a6b-90c1-9e043a7ab5be"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f5b4307e-bc5d-42a6-9b20-0f0437af6e40"",
                    ""path"": ""*/{Hatswitch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f7d440e-7c18-4298-af31-8866e6c79411"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e480e02-2bc4-4487-8f26-4f956a22893d"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a32b91d-607a-4293-b6c3-c53a482b0025"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Talk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ruby
        m_Ruby = asset.FindActionMap("Ruby", throwIfNotFound: true);
        m_Ruby_Movement = m_Ruby.FindAction("Movement", throwIfNotFound: true);
        m_Ruby_Launch = m_Ruby.FindAction("Launch", throwIfNotFound: true);
        m_Ruby_Talk = m_Ruby.FindAction("Talk", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ruby
    private readonly InputActionMap m_Ruby;
    private IRubyActions m_RubyActionsCallbackInterface;
    private readonly InputAction m_Ruby_Movement;
    private readonly InputAction m_Ruby_Launch;
    private readonly InputAction m_Ruby_Talk;
    public struct RubyActions
    {
        private @RubyInputAction m_Wrapper;
        public RubyActions(@RubyInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Ruby_Movement;
        public InputAction @Launch => m_Wrapper.m_Ruby_Launch;
        public InputAction @Talk => m_Wrapper.m_Ruby_Talk;
        public InputActionMap Get() { return m_Wrapper.m_Ruby; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RubyActions set) { return set.Get(); }
        public void SetCallbacks(IRubyActions instance)
        {
            if (m_Wrapper.m_RubyActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_RubyActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_RubyActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_RubyActionsCallbackInterface.OnMovement;
                @Launch.started -= m_Wrapper.m_RubyActionsCallbackInterface.OnLaunch;
                @Launch.performed -= m_Wrapper.m_RubyActionsCallbackInterface.OnLaunch;
                @Launch.canceled -= m_Wrapper.m_RubyActionsCallbackInterface.OnLaunch;
                @Talk.started -= m_Wrapper.m_RubyActionsCallbackInterface.OnTalk;
                @Talk.performed -= m_Wrapper.m_RubyActionsCallbackInterface.OnTalk;
                @Talk.canceled -= m_Wrapper.m_RubyActionsCallbackInterface.OnTalk;
            }
            m_Wrapper.m_RubyActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Launch.started += instance.OnLaunch;
                @Launch.performed += instance.OnLaunch;
                @Launch.canceled += instance.OnLaunch;
                @Talk.started += instance.OnTalk;
                @Talk.performed += instance.OnTalk;
                @Talk.canceled += instance.OnTalk;
            }
        }
    }
    public RubyActions @Ruby => new RubyActions(this);
    public interface IRubyActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLaunch(InputAction.CallbackContext context);
        void OnTalk(InputAction.CallbackContext context);
    }
}
